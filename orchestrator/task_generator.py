import sys
import time
import json
import redis
import random
from utilities import get_config, init_redis_client, generate_matrix

def generate_task_payload(matrix_size):
    """
    Construct a task payload for matrix multiplication.

    Args:
        matrix_size (int): The size of the matrix (NxN).

    Returns:
        dict: Task payload dictionary.
    """
    return {
        "task_application": "matrix_multiplication",
        "task_data": None,  # Actual data will be generated by workers
        "task_data_size": matrix_size,
        "task_deadline": 60  # seconds
    }

def push_task_to_queue(redis_client, queue_name, task_json, task_index):
    """
    Push a task to Redis queue with error handling and retry logic.

    Args:
        redis_client (Redis): Redis client instance.
        queue_name (str): Redis queue name.
        task_json (str): Task payload in JSON string format.
        task_index (int): Index of the task (for logging).

    Returns:
        bool: True if push succeeded, False otherwise.
    """
    try:
        start_time = time.time()
        redis_client.lpush(queue_name, task_json)
        duration = time.time() - start_time
        print(f"[INFO] Task {task_index} pushed to '{queue_name}' in {duration:.4f}s.")
        return True
    except redis.exceptions.ConnectionError as e:
        print(f"[ERROR] Redis connection failed: {e}. Retrying in 5s...")
        time.sleep(5)
        try:
            new_client = init_redis_client()
            new_client.lpush(queue_name, task_json)
            print(f"[INFO] Retry succeeded for task {task_index}.")
            return True
        except Exception as retry_e:
            print(f"[CRITICAL] Retry failed for task {task_index}: {retry_e}", file=sys.stderr)
    except Exception as e:
        print(f"[ERROR] Failed to push task {task_index}: {e}", file=sys.stderr)

    return False

def generate_and_push_tasks(num_tasks, redis_client, input_queue):
    """
    Generate and push matrix multiplication tasks to Redis queue.

    Args:
        num_tasks (int): Number of tasks to generate.
        redis_client (Redis): Redis client instance.
        input_queue (str): Name of the Redis queue.
    """
    print(f"[INFO] Starting task generation: {num_tasks} tasks to '{input_queue}'")

    for i in range(1, num_tasks + 1):
        matrix_size = random.randint(10, 100)
        task_payload = generate_task_payload(matrix_size)
        task_json = json.dumps(task_payload)
        json_size = len(task_json.encode('utf-8'))

        success = push_task_to_queue(redis_client, input_queue, task_json, i)

        if success:
            print(f"[INFO] Task {i}/{num_tasks}: size={json_size} bytes, matrix={matrix_size}x{matrix_size}")
            if i % 100 == 0 or i == num_tasks:
                print(f"[INFO] Batch update: {i} tasks pushed.")
        else:
            print(f"[ERROR] Skipped task {i} due to Redis failure.")

    print(f"[INFO] Task generation complete: {num_tasks} tasks pushed to '{input_queue}'.")

def main():
    if len(sys.argv) < 2:
        print("Usage: python task_generator.py <number_of_tasks_to_generate>")
        sys.exit(1)

    try:
        num_tasks = int(sys.argv[1])
        if num_tasks <= 0:
            raise ValueError("Number of tasks must be a positive integer.")
    except ValueError as ve:
        print(f"[ERROR] Invalid task number: {ve}", file=sys.stderr)
        sys.exit(1)

    config = get_config()

    try:
        redis_client = init_redis_client()
    except redis.exceptions.ConnectionError as e:
        print(f"[ERROR] Initial Redis connection failed: {e}. Retrying...")
        time.sleep(5)
        try:
            redis_client = init_redis_client()
        except Exception as init_e:
            print(f"[CRITICAL] Redis reinitialization failed: {init_e}", file=sys.stderr)
            sys.exit(1)

    generate_and_push_tasks(num_tasks, redis_client, config['input_queue_name'])

if __name__ == "__main__":
    main()
